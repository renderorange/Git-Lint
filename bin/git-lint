#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Getopt::Long ();
use Pod::Usage   ();
use Git::Lint;

my $VERSION = '0.004';

my %opt = (
    profile => 'default',
);
Getopt::Long::GetOptions(
    \%opt,
    'check=s',
    'profile=s',
    'version' => sub { print "git-lint version $VERSION\n"; exit 0 },
    'help',
) or Pod::Usage::pod2usage( -exitval => 1 );

Pod::Usage::pod2usage( -exitval => 0, -verbose => 1 ) if ( $opt{help} );
Pod::Usage::pod2usage( -exitval => 1, -verbose => 0 ) unless $opt{check} && ( $opt{check} eq 'commit' || $opt{check} eq 'message' );

if ( $opt{check} eq 'message' ) {
    $opt{file} = shift @ARGV;
    Pod::Usage::pod2usage( -exitval => 1 ) unless $opt{file};
}

delete $opt{version};
delete $opt{help};

my $lint = Git::Lint->new();
$lint->run(\%opt);

if ( $lint->{issues} ) {
    print STDERR "git-lint: the following issues were found in your ";

    if ($opt{check} eq 'commit') {
        print STDERR "commit\n\n";

        foreach my $filename ( keys %{ $lint->{issues} } ) {
            print STDERR $filename . "\n";
            print STDERR $_ . "\n" foreach @{ $lint->{issues}{$filename} };
            print STDERR "\n";
        }
    }
    else {
        print STDERR "commit message\n\n";
        print STDERR $_ . "\n" foreach @{ $lint->{issues} };
        print STDERR "\n";
    }

    exit 1;
}

exit 0;

__END__

=pod

=head1 NAME

git-lint - linter for git

=head1 SYNOPSIS

 git-lint [--check commit] [--check message <message_file>]
          [--profile <name>]
          [--version] [--help]

=head1 DESCRIPTION

C<git-lint> is a program to lint git commits.

=head1 OPTIONS

=over

=item --check

Run either check mode commit or message.

If check type is message, C<git-lint> expects the file path of the commit message to check as an unnamed option.

=item --profile

Run a specific profile of check modules.

Defaults to the 'default' profile.

=item --version

Print the version.

=item --help

Print the help menu.

=back

=head1 CHECK MODES

C<git-lint> has 2 check modes, C<commit> and C<message>.

=head2 commit

The C<commit> check mode checks each line of the commit diff for issues defined in the commit check modules.

=head2 message

The C<message> check mode checks the commit message for issues defined in the message check modules.

=head1 CONFIGURATION

Configuration is done through C<git config> files (F<~/.gitconfig> or F</repo/.git/config>).

Only one profile, C<default>, is defined internally. C<default> contains all check modules by default.

The C<default> profile can be overridden through C<git config>.

To set the default profile to only run the C<Whitespace> commit check:

 [lint "profiles.commit"]
     default = Whitespace

Or set the default profile to C<Whitespace> and the fictional commit check, C<Flipdoozler>:

 [lint "profiles.commit"]
     default = Whitespace, Flipdoozler

Additional profiles can be added with a new name and list of checks to run.

 [lint "profiles.commit"]
     default = Whitespace, Flipdoozler
     hardcore = Other, Module, Names

=head1 INSTALLATION

To enable as a C<pre-commit> hook, create a symlink to the C<pre-commit.example> script named C<pre-commit> in the C<.git/hooks> directory of the repo you want to check.

 ln -s ~/git/Git-Lint/bin/pre-commit.example pre-commit

To automate running other profiles, a new `pre-commit` script can be created and linked to the `pre-commit` hook in the repo you want to check.

 ~/git/Git-Lint/bin $ cat pre-commit.hardcore
 #!/bin/bash

 perl ~/git/Git-Lint/bin/git-lint --profile hardcore

To enable as a C<commit-msg> hook, create a symlink to the C<commit-msg.example> script named C<commit-msg> in the C<.git/hooks> directory of the repo you want to check.

 ln -s ~/git/Git-Lint/bin/commit-msg.example commit-msg

=head1 COPYRIGHT AND LICENSE

Copyright (c) 2022 Blaine Motsinger under the MIT license.

=head1 AUTHOR

Blaine Motsinger C<blaine@renderorange.com>

=cut

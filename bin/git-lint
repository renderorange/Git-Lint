#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib "$FindBin::RealBin/../lib";

use Getopt::Long ();
use Pod::Usage   ();
use Git::Lint;

my $VERSION = '0.001';

my %opt = (
    profile => 'default',
);
Getopt::Long::GetOptions(
    \%opt,
    'profile=s',
    'version' => sub { print "git-lint version $VERSION\n"; exit 0 },
    'help',
) or Pod::Usage::pod2usage( -exitval => 1 );

Pod::Usage::pod2usage( -exitval => 0 ) if ( $opt{help} );

delete $opt{version};
delete $opt{help};

my $lint = Git::Lint->new();
$lint->run(\%opt);

if ( keys %{ $lint->{issues} } ) {
    print STDERR "the following issues were found:\n\n";

    foreach my $filename ( keys %{ $lint->{issues} } ) {
        print STDERR $filename . "\n";

        foreach my $issue ( @{ $lint->{issues}{$filename} } ) {
            print STDERR $issue . "\n";
        }

        print STDERR "\n";
    }

    exit 1;
}

exit 0;

__END__

=pod

=head1 NAME

git-lint - linter for git

=head1 SYNOPSIS

 git-lint [--profile <name>] [--version] [--help]

=head1 DESCRIPTION

C<git-lint> is a program to lint git commits.

=head1 OPTIONS

=over

=item --profile

Run a specific profile of checks.

Defaults to the 'default' profile.

=item --version

Print the version.

=item --help

Print the help menu.

=back

=head1 AUTHOR

Blaine Motsinger C<blaine@renderorange.com>

=cut
